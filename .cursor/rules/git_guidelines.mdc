---
description: 
globs: 
alwaysApply: false
---
# Git 版本控制规范 (简化版)

## 1. 版本管理概述

本项目采用**功能驱动**的版本管理策略和**基于主干 (Trunk-Based like)** 的简化工作流。核心原则包括：

- **功能驱动**：版本发布基于功能完成度和产品路线图。
- **质量优先**：`main` 分支应始终保持可发布状态。
- **语义化版本**：遵循语义化版本控制规范，通过 Git Tags 标记发布。
- **透明沟通**：通过详细的更新日志和版本说明传达变更。

## 2. 版本号规范 (语义化版本)

- **格式**：`主版本号.次版本号.修订号`（例如：`2.0.1`）
- **主版本号 (Major)**：进行不兼容的重大更改时递增。
- **次版本号 (Minor)**：添加向后兼容的功能时递增。
- **修订号 (Patch)**：进行向后兼容的错误修复时递增。
- **标记方式**: 使用 Git Tags 直接在 `main` 分支上标记发布版本 (e.g., `v2.0.1`)。

## 3. 分支策略 (简化主干模型)

- **`main`**: 唯一的长期分支，代表项目最新、可发布的状态。
- **`feature/*` (可选，推荐)**: 用于开发新功能或进行较大修改的**短期**分支。
    - 从 `main` 创建。
    - 完成后合并回 `main`。
    - 合并后应立即删除。

### 3.1 分支命名规范

- `feature/功能描述` (e.g., `feature/mcp-service-structure`)

### 3.2 操作流程 (示例)

#### 小型改动 (直接提交到 main)

1.  `git checkout main`
2.  `git pull origin main`
3.  *(进行修改...)*
4.  `git add .`
5.  `git commit -m "fix: 修复某小问题"`  *(遵循 Conventional Commits)*
6.  `git push origin main`

#### 功能开发 (使用特性分支)

1.  `git checkout main`
2.  `git pull origin main`
3.  `git checkout -b feature/功能描述`
4.  *(开发...)*
5.  `git add .`
6.  `git commit -m "feat: 添加XXX功能"`
7.  *(可选: 拉取最新的 main 到 feature 分支以保持同步 `git pull origin main`)*
8.  `git checkout main`
9.  `git merge --no-ff feature/功能描述` *(推荐使用 `--no-ff` 保留合并历史)*
10. `git push origin main`
11. `git branch -d feature/功能描述`
12. `git push origin --delete feature/功能描述` *(删除远程分支，如果已推送)*

## 4. 提交消息规范 (Conventional Commits)

```
<类型>[可选作用域]: <描述>

[可选正文]

[可选脚注]
```

### 4.1 提交类型

- **feat**: 新功能
- **fix**: 错误修复
- **docs**: 文档更改
- **style**: 代码风格调整 (不影响逻辑)
- **refactor**: 代码重构
- **perf**: 性能优化
- **test**: 测试相关
- **build**: 构建系统或外部依赖相关
- **ci**: CI/CD 配置相关
- **chore**: 其他杂项

## 5. 版本发布与 README 更新

当决定发布新版本时，在 `main` 分支上执行以下操作，并**必须**更新项目根目录的 `[README.md](mdc:README.md)` 文件：

1.  确保 `main` 分支处于所需发布状态。
2.  创建并推送版本标签：
    ```bash
    git tag -a v版本号 -m "版本 v版本号 发布"  # 例如: v2.0.1
    git push origin v版本号
    ```
3.  编辑 `[README.md](mdc:README.md)` 文件。
4.  在 "版本历史" 部分添加新版本的记录，包括版本号、日期（当前系统日期）和主要变更摘要（新功能、修复、改进等）。
5.  提交 `[README.md](mdc:README.md)` 的更新：
    ```bash
    git add README.md
    git commit -m "docs: 更新 README.md 版本历史至 v版本号"
    git push origin main
    ```

## 6. 协作最佳实践

1.  **常 Pull**: 在开始新工作或提交前，经常拉取 `main` 分支的最新代码 (`git pull --rebase origin main`)。
2.  **小 Commit**: 保持提交的粒度小且专注。
3.  **清晰 Message**: 编写符合规范且描述清晰的 Commit Message。
4.  **及时合并**: 功能完成后及时合并 `feature` 分支回 `main`。
5.  **代码审查**: (如果使用平台特性如 GitHub Pull Request) 在合并 `feature` 分支前进行代码审查。
6.  **清理分支**: 合并后及时删除已完成的 `feature` 分支 (本地和远程)。
